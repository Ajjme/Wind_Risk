2024-08-29 06:50:33.903 [info] 




2024-08-29 06:50:33.937 [info] Extension host agent started.
2024-08-29 06:50:33.969 [debug] No uninstalled extensions found.
2024-08-29 06:50:36.192 [info] [10.183.18.196][4b31cb63][ManagementConnection] New connection established.
2024-08-29 06:50:37.003 [debug] Error while reading the extension cache file: /hpc/home/ajj54/.local/share/code-server/CachedProfilesData/__default__profile__/extensions.user.cache Unable to read file '/hpc/home/ajj54/.local/share/code-server/CachedProfilesData/__default__profile__/extensions.user.cache' (Error: Unable to resolve nonexistent file '/hpc/home/ajj54/.local/share/code-server/CachedProfilesData/__default__profile__/extensions.user.cache')
2024-08-29 06:50:37.355 [debug] Using cached extensions scan result file:///admin/apps/rhel9/code-server-4.90.2/lib/vscode/extensions
2024-08-29 06:50:37.525 [debug] ComputeTargetPlatform: linux-x64
2024-08-29 06:50:37.543 [info] [10.183.18.196][d0c64529][ExtensionHostConnection] New connection established.
2024-08-29 06:50:39.220 [info] [10.183.18.196][d0c64529][ExtensionHostConnection] <2818261> Launched Extension Host Process.
2024-08-29 06:50:39.322 [debug] Terminal profile not validated fish ["fish"]
2024-08-29 06:50:39.334 [debug] Terminal profile not validated pwsh ["pwsh"]
2024-08-29 06:50:39.399 [debug] ComputeTargetPlatform: linux-x64
2024-08-29 06:50:44.453 [debug] Terminal profile not validated fish ["fish"]
2024-08-29 06:50:44.453 [debug] Terminal profile not validated pwsh ["pwsh"]
2024-08-29 06:50:44.843 [debug] Terminal process launching on remote agent {"shellLaunchConfig":{"executable":"/bin/bash","cwd":"/hpc/home/ajj54","useShellEnvironment":true},"initialCwd":"/hpc/home/ajj54","cols":80,"rows":30,"env":{"SHELL":"/bin/bash","SLURM_JOB_USER":"ajj54","SLURM_TASKS_PER_NODE":"1","SLURM_JOB_UID":"1546375","HISTCONTROL":"ignoreboth","SLURM_EXPORT_ENV":"NONE","SLURM_TASK_PID":"2816504","CONDA_EXE":"/hpc/group/borsuklab/ajj54/miniconda3/bin/conda","_CE_M":"","__MODULES_LMALTNAME":"code-server/4.90.2&as|code-server/default&as|code-server/latest","SLURM_LOCALID":"0","SLURM_SUBMIT_DIR":"/var/www/ood/apps/sys/dashboard","HOSTNAME":"dcc-core-08","HISTSIZE":"1000","SLURMD_NODENAME":"dcc-core-08","SLURM_JOB_START_TIME":"1724928578","HYDRA_LAUNCHER_EXTRA_ARGS":"--external-launcher","SLURM_CLUSTER_NAME":"dcc","SLURM_JOB_END_TIME":"1724932178","SLURM_CPUS_ON_NODE":"2","SLURM_JOB_CPUS_PER_NODE":"2","SACCT_FORMAT":"user%8,JobID%16,state%12,partition%15,start,elapsed%10,nodelist%20,MaxRss%10,ReqMem%6,NCPUS%4,ExitCode,Workdir%110","PRTE_MCA_plm_slurm_args":"--external-launcher","PWD":"/hpc/home/ajj54/ondemand/data/sys/dashboard/batch_connect/sys/bc_codeserver/output/5febb683-3602-4f6c-87c4-892a8d4b2534","SLURM_GTIDS":"0","LOGNAME":"ajj54","CONDA_PREFIX":"/hpc/group/borsuklab/ajj54/miniconda3","SLURM_JOB_PARTITION":"common","MODULESHOME":"/usr/share/Modules","MANPATH":":/opt/puppetlabs/puppet/share/man","SLURM_TRES_PER_TASK":"cpu=2","SLURM_JOB_NUM_NODES":"1","SLURM_JOBID":"15179672","SLURM_JOB_QOS":"normal","I_MPI_HYDRA_BOOTSTRAP_EXEC_EXTRA_ARGS":"--external-launcher","HOME":"/hpc/home/ajj54","SSH_ASKPASS":"/usr/libexec/openssh/gnome-ssh-askpass","LANG":"en_US.UTF-8","port":"57472","SLURM_PROCID":"0","__MODULES_LMCONFLICT":"code-server/4.90.2&CODE-SERVER","CONDA_PROMPT_MODIFIER":"(base) ","TMPDIR":"/tmp","SLURM_CPUS_PER_TASK":"2","SLURM_NTASKS":"1","SLURM_TOPOLOGY_ADDR":"dcc-core-08","HYDRA_BOOTSTRAP":"slurm","SLURM_TOPOLOGY_ADDR_PATTERN":"node","SLURM_MEM_PER_NODE":"2048","_CE_CONDA":"","LESSOPEN":"||/usr/bin/lesspipe.sh %s","USER":"ajj54","SLURM_NODELIST":"dcc-core-08","ENVIRONMENT":"BATCH","CONDA_SHLVL":"1","MODULES_RUN_QUARANTINE":"LD_LIBRARY_PATH LD_PRELOAD","LOADEDMODULES":"code-server/4.90.2","SLURM_JOB_ACCOUNT":"borsuklab","SLURM_PRIO_PROCESS":"0","SLURM_NPROCS":"1","SHLVL":"2","SLURM_NNODES":"1","SLURM_SUBMIT_HOST":"dcc-ondemand-01","CONDA_PYTHON_EXE":"/hpc/group/borsuklab/ajj54/miniconda3/bin/python","SLURM_JOB_ID":"15179672","password":"pWdjN5QHsquGTPtb","SLURM_NODEID":"0","S_COLORS":"auto","CONDA_DEFAULT_ENV":"base","DEBUGINFOD_URLS":"https://debuginfod.centos.org/ ","which_declare":"declare -f","host":"dcc-core-08","XDG_DATA_DIRS":"/hpc/home/ajj54/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share","SLURM_CONF":"/var/spool/slurmd/conf-cache/slurm.conf","PATH":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/bin/remote-cli:/opt/apps/rhel9/code-server-4.90.2/bin:/hpc/group/borsuklab/ajj54/miniconda3/bin:/hpc/group/borsuklab/ajj54/miniconda3/condabin:/hpc/home/ajj54/.local/bin:/hpc/home/ajj54/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/puppetlabs/bin:/opt/slurm/bin","SLURM_JOB_NAME":"sys/dashboard/sys/bc_codeserver","MODULEPATH":"/opt/apps/modulefiles","_LMFILES_":"/opt/apps/modulefiles/code-server/4.90.2","MAIL":"/var/spool/mail/ajj54","OMPI_MCA_plm_slurm_args":"--external-launcher","SLURM_JOB_GID":"1000000","SLURM_GET_USER_ENV":"1","OLDPWD":"/hpc/home/ajj54/ondemand/data/sys/dashboard/batch_connect/sys/bc_codeserver/output/5febb683-3602-4f6c-87c4-892a8d4b2534","SLURM_JOB_NODELIST":"dcc-core-08","MODULES_CMD":"/usr/share/Modules/libexec/modulecmd.tcl","I_MPI_HYDRA_BOOTSTRAP":"slurm","BASH_FUNC_ml%%":"() {  module ml \"$@\"\n}","BASH_FUNC_find_port%%":"() {  local host=\"${1:-localhost}\";\n local min_port=${2:-2000};\n local max_port=${3:-65535};\n local port_range=($(shuf -i ${min_port}-${max_port}));\n local retries=1;\n for ((attempt=0; attempt<=$retries; attempt++))\n do\n for port in \"${port_range[@]}\";\n do\n if port_used \"${host}:${port}\"; then\n continue;\n fi;\n echo \"${port}\";\n return 0;\n done;\n done;\n echo \"error: failed to find available port in range ${min_port}..${max_port}\" 1>&2;\n return 1\n}","BASH_FUNC_which%%":"() {  ( alias;\n eval ${which_declare} ) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot $@\n}","BASH_FUNC_create_passwd%%":"() {  tr -cd 'a-zA-Z0-9' < /dev/urandom 2> /dev/null | head -c${1:-8}\n}","BASH_FUNC_random_number%%":"() {  shuf -i ${1}-${2} -n 1\n}","BASH_FUNC_module%%":"() {  local _mlredir=0;\n if [ -n \"${MODULES_REDIRECT_OUTPUT+x}\" ]; then\n if [ \"$MODULES_REDIRECT_OUTPUT\" = '0' ]; then\n _mlredir=0;\n else\n if [ \"$MODULES_REDIRECT_OUTPUT\" = '1' ]; then\n _mlredir=1;\n fi;\n fi;\n fi;\n case \" $@ \" in \n *' --no-redirect '*)\n _mlredir=0\n ;;\n *' --redirect '*)\n _mlredir=1\n ;;\n esac;\n if [ $_mlredir -eq 0 ]; then\n _module_raw \"$@\";\n else\n _module_raw \"$@\" 2>&1;\n fi\n}","BASH_FUNC_wait_until_port_used%%":"() {  local port=\"${1}\";\n local time=\"${2:-30}\";\n for ((i=1; i<=time*2; i++))\n do\n port_used \"${port}\";\n port_status=$?;\n if [ \"$port_status\" == \"0\" ]; then\n return 0;\n else\n if [ \"$port_status\" == \"127\" ]; then\n echo \"commands to find port were either not found or inaccessible.\";\n echo \"command options are lsof, nc, bash's /dev/tcp, or python (or python3) with socket lib.\";\n return 127;\n fi;\n fi;\n sleep 0.5;\n done;\n return 1\n}","BASH_FUNC__module_raw%%":"() {  eval \"$(/usr/bin/tclsh '/usr/share/Modules/libexec/modulecmd.tcl' bash \"$@\")\";\n _mlstatus=$?;\n return $_mlstatus\n}","BASH_FUNC_port_used%%":"() {  local port=\"${1#*:}\";\n local host=$((expr \"${1}\" : '\\(.*\\):' || echo \"localhost\") | awk 'END{print $NF}');\n local port_strategies=(port_used_nc port_used_lsof port_used_bash port_used_python port_used_python3);\n for strategy in ${port_strategies[@]};\n do\n $strategy $host $port;\n status=$?;\n if [[ \"$status\" == \"0\" ]] || [[ \"$status\" == \"1\" ]]; then\n return $status;\n fi;\n done;\n return 127\n}","BASH_FUNC_source_helpers%%":"() {  function random_number () \n { \n shuf -i ${1}-${2} -n 1\n };\n export -f random_number;\n function port_used_python () \n { \n python -c \"import socket; socket.socket().connect(('$1',$2))\" > /dev/null 2>&1\n };\n function port_used_python3 () \n { \n python3 -c \"import socket; socket.socket().connect(('$1',$2))\" > /dev/null 2>&1\n };\n function port_used_nc () \n { \n nc -w 2 \"$1\" \"$2\" < /dev/null > /dev/null 2>&1\n };\n function port_used_lsof () \n { \n lsof -i :\"$2\" > /dev/null 2>&1\n };\n function port_used_bash () \n { \n local bash_supported=$(strings /bin/bash 2>/dev/null | grep tcp);\n if [ \"$bash_supported\" == \"/dev/tcp/*/*\" ]; then\n ( : < /dev/tcp/$1/$2 ) > /dev/null 2>&1;\n else\n return 127;\n fi\n };\n function port_used () \n { \n local port=\"${1#*:}\";\n local host=$((expr \"${1}\" : '\\(.*\\):' || echo \"localhost\") | awk 'END{print $NF}');\n local port_strategies=(port_used_nc port_used_lsof port_used_bash port_used_python port_used_python3);\n for strategy in ${port_strategies[@]};\n do\n $strategy $host $port;\n status=$?;\n if [[ \"$status\" == \"0\" ]] || [[ \"$status\" == \"1\" ]]; then\n return $status;\n fi;\n done;\n return 127\n };\n export -f port_used;\n function find_port () \n { \n local host=\"${1:-localhost}\";\n local min_port=${2:-2000};\n local max_port=${3:-65535};\n local port_range=($(shuf -i ${min_port}-${max_port}));\n local retries=1;\n for ((attempt=0; attempt<=$retries; attempt++))\n do\n for port in \"${port_range[@]}\";\n do\n if port_used \"${host}:${port}\"; then\n continue;\n fi;\n echo \"${port}\";\n return 0;\n done;\n done;\n echo \"error: failed to find available port in range ${min_port}..${max_port}\" 1>&2;\n return 1\n };\n export -f find_port;\n function wait_until_port_used () \n { \n local port=\"${1}\";\n local time=\"${2:-30}\";\n for ((i=1; i<=time*2; i++))\n do\n port_used \"${port}\";\n port_status=$?;\n if [ \"$port_status\" == \"0\" ]; then\n return 0;\n else\n if [ \"$port_status\" == \"127\" ]; then\n echo \"commands to find port were either not found or inaccessible.\";\n echo \"command options are lsof, nc, bash's /dev/tcp, or python (or python3) with socket lib.\";\n return 127;\n fi;\n fi;\n sleep 0.5;\n done;\n return 1\n };\n export -f wait_until_port_used;\n function create_passwd () \n { \n tr -cd 'a-zA-Z0-9' < /dev/urandom 2> /dev/null | head -c${1:-8}\n };\n export -f create_passwd\n}","LOG_LEVEL":"debug","NODE_EXEC_PATH":"/admin/apps/rhel9/code-server-4.90.2/lib/node","FAMILY":"almalinux","LS_COLORS":"","SSI_VERSION":"9.4","PS1":"(base) \\[\\e[32m\\]\\u@\\h  \\[\\e[34;1m\\]\\w $\\[\\e[0m\\] ","_":"/admin/apps/rhel9/code-server-4.90.2/lib/node","VSCODE_PROXY_URI":"https://dcc-ondemand-01.oit.duke.edu/rnode/dcc-core-08/57472/proxy/{{port}}/","BROWSER":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/bin/helpers/browser.sh","TERM_PROGRAM":"vscode","TERM_PROGRAM_VERSION":"1.90.1","COLORTERM":"truecolor","GIT_ASKPASS":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/extensions/git/dist/askpass.sh","VSCODE_GIT_ASKPASS_NODE":"/admin/apps/rhel9/code-server-4.90.2/lib/node","VSCODE_GIT_ASKPASS_EXTRA_ARGS":"","VSCODE_GIT_ASKPASS_MAIN":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/extensions/git/dist/askpass-main.js","VSCODE_GIT_IPC_HANDLE":"/tmp/vscode-git-0892b29a11.sock"}}
2024-08-29 07:29:32.970 [debug] Terminal profile not validated fish ["fish"]
2024-08-29 07:29:32.971 [debug] Terminal profile not validated pwsh ["pwsh"]
2024-08-29 07:29:33.321 [debug] Terminal process launching on remote agent {"shellLaunchConfig":{"name":"Python","executable":"/bin/bash","args":[],"cwd":"/hpc/home/ajj54","env":{"PYTHONSTARTUP":"/hpc/home/ajj54/.local/share/code-server/extensions/ms-python.python-2024.12.3-universal/python_files/pythonrc.py"},"useShellEnvironment":true},"initialCwd":"/hpc/home/ajj54","cols":198,"rows":15,"env":{"SHELL":"/bin/bash","SLURM_JOB_USER":"ajj54","SLURM_TASKS_PER_NODE":"1","SLURM_JOB_UID":"1546375","HISTCONTROL":"ignoreboth","SLURM_EXPORT_ENV":"NONE","SLURM_TASK_PID":"2816504","CONDA_EXE":"/hpc/group/borsuklab/ajj54/miniconda3/bin/conda","_CE_M":"","__MODULES_LMALTNAME":"code-server/4.90.2&as|code-server/default&as|code-server/latest","SLURM_LOCALID":"0","SLURM_SUBMIT_DIR":"/var/www/ood/apps/sys/dashboard","HOSTNAME":"dcc-core-08","HISTSIZE":"1000","SLURMD_NODENAME":"dcc-core-08","SLURM_JOB_START_TIME":"1724928578","HYDRA_LAUNCHER_EXTRA_ARGS":"--external-launcher","SLURM_CLUSTER_NAME":"dcc","SLURM_JOB_END_TIME":"1724932178","SLURM_CPUS_ON_NODE":"2","SLURM_JOB_CPUS_PER_NODE":"2","SACCT_FORMAT":"user%8,JobID%16,state%12,partition%15,start,elapsed%10,nodelist%20,MaxRss%10,ReqMem%6,NCPUS%4,ExitCode,Workdir%110","PRTE_MCA_plm_slurm_args":"--external-launcher","PWD":"/hpc/home/ajj54/ondemand/data/sys/dashboard/batch_connect/sys/bc_codeserver/output/5febb683-3602-4f6c-87c4-892a8d4b2534","SLURM_GTIDS":"0","LOGNAME":"ajj54","CONDA_PREFIX":"/hpc/group/borsuklab/ajj54/miniconda3","SLURM_JOB_PARTITION":"common","MODULESHOME":"/usr/share/Modules","MANPATH":":/opt/puppetlabs/puppet/share/man","SLURM_TRES_PER_TASK":"cpu=2","SLURM_JOB_NUM_NODES":"1","SLURM_JOBID":"15179672","SLURM_JOB_QOS":"normal","I_MPI_HYDRA_BOOTSTRAP_EXEC_EXTRA_ARGS":"--external-launcher","HOME":"/hpc/home/ajj54","SSH_ASKPASS":"/usr/libexec/openssh/gnome-ssh-askpass","LANG":"en_US.UTF-8","port":"57472","SLURM_PROCID":"0","__MODULES_LMCONFLICT":"code-server/4.90.2&CODE-SERVER","CONDA_PROMPT_MODIFIER":"(base) ","TMPDIR":"/tmp","SLURM_CPUS_PER_TASK":"2","SLURM_NTASKS":"1","SLURM_TOPOLOGY_ADDR":"dcc-core-08","HYDRA_BOOTSTRAP":"slurm","SLURM_TOPOLOGY_ADDR_PATTERN":"node","SLURM_MEM_PER_NODE":"2048","_CE_CONDA":"","LESSOPEN":"||/usr/bin/lesspipe.sh %s","USER":"ajj54","SLURM_NODELIST":"dcc-core-08","ENVIRONMENT":"BATCH","CONDA_SHLVL":"1","MODULES_RUN_QUARANTINE":"LD_LIBRARY_PATH LD_PRELOAD","LOADEDMODULES":"code-server/4.90.2","SLURM_JOB_ACCOUNT":"borsuklab","SLURM_PRIO_PROCESS":"0","SLURM_NPROCS":"1","SHLVL":"2","SLURM_NNODES":"1","SLURM_SUBMIT_HOST":"dcc-ondemand-01","CONDA_PYTHON_EXE":"/hpc/group/borsuklab/ajj54/miniconda3/bin/python","SLURM_JOB_ID":"15179672","password":"pWdjN5QHsquGTPtb","SLURM_NODEID":"0","S_COLORS":"auto","CONDA_DEFAULT_ENV":"base","DEBUGINFOD_URLS":"https://debuginfod.centos.org/ ","which_declare":"declare -f","host":"dcc-core-08","XDG_DATA_DIRS":"/hpc/home/ajj54/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share","SLURM_CONF":"/var/spool/slurmd/conf-cache/slurm.conf","PATH":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/bin/remote-cli:/opt/apps/rhel9/code-server-4.90.2/bin:/hpc/group/borsuklab/ajj54/miniconda3/bin:/hpc/group/borsuklab/ajj54/miniconda3/condabin:/hpc/home/ajj54/.local/bin:/hpc/home/ajj54/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/puppetlabs/bin:/opt/slurm/bin","SLURM_JOB_NAME":"sys/dashboard/sys/bc_codeserver","MODULEPATH":"/opt/apps/modulefiles","_LMFILES_":"/opt/apps/modulefiles/code-server/4.90.2","MAIL":"/var/spool/mail/ajj54","OMPI_MCA_plm_slurm_args":"--external-launcher","SLURM_JOB_GID":"1000000","SLURM_GET_USER_ENV":"1","OLDPWD":"/hpc/home/ajj54/ondemand/data/sys/dashboard/batch_connect/sys/bc_codeserver/output/5febb683-3602-4f6c-87c4-892a8d4b2534","SLURM_JOB_NODELIST":"dcc-core-08","MODULES_CMD":"/usr/share/Modules/libexec/modulecmd.tcl","I_MPI_HYDRA_BOOTSTRAP":"slurm","BASH_FUNC_ml%%":"() {  module ml \"$@\"\n}","BASH_FUNC_find_port%%":"() {  local host=\"${1:-localhost}\";\n local min_port=${2:-2000};\n local max_port=${3:-65535};\n local port_range=($(shuf -i ${min_port}-${max_port}));\n local retries=1;\n for ((attempt=0; attempt<=$retries; attempt++))\n do\n for port in \"${port_range[@]}\";\n do\n if port_used \"${host}:${port}\"; then\n continue;\n fi;\n echo \"${port}\";\n return 0;\n done;\n done;\n echo \"error: failed to find available port in range ${min_port}..${max_port}\" 1>&2;\n return 1\n}","BASH_FUNC_which%%":"() {  ( alias;\n eval ${which_declare} ) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot $@\n}","BASH_FUNC_create_passwd%%":"() {  tr -cd 'a-zA-Z0-9' < /dev/urandom 2> /dev/null | head -c${1:-8}\n}","BASH_FUNC_random_number%%":"() {  shuf -i ${1}-${2} -n 1\n}","BASH_FUNC_module%%":"() {  local _mlredir=0;\n if [ -n \"${MODULES_REDIRECT_OUTPUT+x}\" ]; then\n if [ \"$MODULES_REDIRECT_OUTPUT\" = '0' ]; then\n _mlredir=0;\n else\n if [ \"$MODULES_REDIRECT_OUTPUT\" = '1' ]; then\n _mlredir=1;\n fi;\n fi;\n fi;\n case \" $@ \" in \n *' --no-redirect '*)\n _mlredir=0\n ;;\n *' --redirect '*)\n _mlredir=1\n ;;\n esac;\n if [ $_mlredir -eq 0 ]; then\n _module_raw \"$@\";\n else\n _module_raw \"$@\" 2>&1;\n fi\n}","BASH_FUNC_wait_until_port_used%%":"() {  local port=\"${1}\";\n local time=\"${2:-30}\";\n for ((i=1; i<=time*2; i++))\n do\n port_used \"${port}\";\n port_status=$?;\n if [ \"$port_status\" == \"0\" ]; then\n return 0;\n else\n if [ \"$port_status\" == \"127\" ]; then\n echo \"commands to find port were either not found or inaccessible.\";\n echo \"command options are lsof, nc, bash's /dev/tcp, or python (or python3) with socket lib.\";\n return 127;\n fi;\n fi;\n sleep 0.5;\n done;\n return 1\n}","BASH_FUNC__module_raw%%":"() {  eval \"$(/usr/bin/tclsh '/usr/share/Modules/libexec/modulecmd.tcl' bash \"$@\")\";\n _mlstatus=$?;\n return $_mlstatus\n}","BASH_FUNC_port_used%%":"() {  local port=\"${1#*:}\";\n local host=$((expr \"${1}\" : '\\(.*\\):' || echo \"localhost\") | awk 'END{print $NF}');\n local port_strategies=(port_used_nc port_used_lsof port_used_bash port_used_python port_used_python3);\n for strategy in ${port_strategies[@]};\n do\n $strategy $host $port;\n status=$?;\n if [[ \"$status\" == \"0\" ]] || [[ \"$status\" == \"1\" ]]; then\n return $status;\n fi;\n done;\n return 127\n}","BASH_FUNC_source_helpers%%":"() {  function random_number () \n { \n shuf -i ${1}-${2} -n 1\n };\n export -f random_number;\n function port_used_python () \n { \n python -c \"import socket; socket.socket().connect(('$1',$2))\" > /dev/null 2>&1\n };\n function port_used_python3 () \n { \n python3 -c \"import socket; socket.socket().connect(('$1',$2))\" > /dev/null 2>&1\n };\n function port_used_nc () \n { \n nc -w 2 \"$1\" \"$2\" < /dev/null > /dev/null 2>&1\n };\n function port_used_lsof () \n { \n lsof -i :\"$2\" > /dev/null 2>&1\n };\n function port_used_bash () \n { \n local bash_supported=$(strings /bin/bash 2>/dev/null | grep tcp);\n if [ \"$bash_supported\" == \"/dev/tcp/*/*\" ]; then\n ( : < /dev/tcp/$1/$2 ) > /dev/null 2>&1;\n else\n return 127;\n fi\n };\n function port_used () \n { \n local port=\"${1#*:}\";\n local host=$((expr \"${1}\" : '\\(.*\\):' || echo \"localhost\") | awk 'END{print $NF}');\n local port_strategies=(port_used_nc port_used_lsof port_used_bash port_used_python port_used_python3);\n for strategy in ${port_strategies[@]};\n do\n $strategy $host $port;\n status=$?;\n if [[ \"$status\" == \"0\" ]] || [[ \"$status\" == \"1\" ]]; then\n return $status;\n fi;\n done;\n return 127\n };\n export -f port_used;\n function find_port () \n { \n local host=\"${1:-localhost}\";\n local min_port=${2:-2000};\n local max_port=${3:-65535};\n local port_range=($(shuf -i ${min_port}-${max_port}));\n local retries=1;\n for ((attempt=0; attempt<=$retries; attempt++))\n do\n for port in \"${port_range[@]}\";\n do\n if port_used \"${host}:${port}\"; then\n continue;\n fi;\n echo \"${port}\";\n return 0;\n done;\n done;\n echo \"error: failed to find available port in range ${min_port}..${max_port}\" 1>&2;\n return 1\n };\n export -f find_port;\n function wait_until_port_used () \n { \n local port=\"${1}\";\n local time=\"${2:-30}\";\n for ((i=1; i<=time*2; i++))\n do\n port_used \"${port}\";\n port_status=$?;\n if [ \"$port_status\" == \"0\" ]; then\n return 0;\n else\n if [ \"$port_status\" == \"127\" ]; then\n echo \"commands to find port were either not found or inaccessible.\";\n echo \"command options are lsof, nc, bash's /dev/tcp, or python (or python3) with socket lib.\";\n return 127;\n fi;\n fi;\n sleep 0.5;\n done;\n return 1\n };\n export -f wait_until_port_used;\n function create_passwd () \n { \n tr -cd 'a-zA-Z0-9' < /dev/urandom 2> /dev/null | head -c${1:-8}\n };\n export -f create_passwd\n}","LOG_LEVEL":"debug","NODE_EXEC_PATH":"/admin/apps/rhel9/code-server-4.90.2/lib/node","FAMILY":"almalinux","LS_COLORS":"","SSI_VERSION":"9.4","PS1":"(base) \\[\\e[32m\\]\\u@\\h  \\[\\e[34;1m\\]\\w $\\[\\e[0m\\] ","_":"/admin/apps/rhel9/code-server-4.90.2/lib/node","VSCODE_PROXY_URI":"https://dcc-ondemand-01.oit.duke.edu/rnode/dcc-core-08/57472/proxy/{{port}}/","BROWSER":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/bin/helpers/browser.sh","PYTHONSTARTUP":"/hpc/home/ajj54/.local/share/code-server/extensions/ms-python.python-2024.12.3-universal/python_files/pythonrc.py","TERM_PROGRAM":"vscode","TERM_PROGRAM_VERSION":"1.90.1","COLORTERM":"truecolor","GIT_ASKPASS":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/extensions/git/dist/askpass.sh","VSCODE_GIT_ASKPASS_NODE":"/admin/apps/rhel9/code-server-4.90.2/lib/node","VSCODE_GIT_ASKPASS_EXTRA_ARGS":"","VSCODE_GIT_ASKPASS_MAIN":"/admin/apps/rhel9/code-server-4.90.2/lib/vscode/extensions/git/dist/askpass-main.js","VSCODE_GIT_IPC_HANDLE":"/tmp/vscode-git-0892b29a11.sock"}}
